{"version":3,"sources":["Pokemon.js","Pagination.js","PokemonTypeList.js","App.js","serviceWorker.js","index.js"],"names":["Pokemon","observer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","initializerDefineProperty","_descriptor","assertThisInitialized","state","isReverse","handleClick","bind","handleClickPokemon","type","gettingType","setState","currentType","prevState","_this2","_this$props","id","name","attack","speed","react_default","a","createElement","className","onClick","src","concat","map","t","key","e","React","Component","observable","action","Pagination","Pagination_descriptor","_descriptor2","handlePaginClick","currentPage","pageCnt","pageChange","Number","target","cntChange","pageList","_this$state","pag","i","cntPokPage","pagin","pageOne","page","PokemonTypeList","PokemonTypeList_descriptor","typeName","typeOne","PokemonPage","App_descriptor","App_descriptor2","_descriptor3","_descriptor4","_descriptor5","_descriptor6","_descriptor7","_descriptor8","handlePageChange","handleCntChange","handleChange","pokemon","search","searchType","pokemonType","cntPage","poks","url","fetch","then","response","json","responseData","connectionApi","_this3","filteredName","filter","pok","toLowerCase","indexOf","filteredType","types","typeDesk","length","undefined","push","pages","slice","pokemonPage","icon","onChange","onchange","src_Pagination","data","sizePage","oneType","ind","src_PokemonTypeList","character","src_Pokemon","stats","base_stat","_this4","value","ReactDOM","render","App_PokemonPage","document","getElementById","Boolean","window","location","hostname","match","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.60836207.chunk.js","sourcesContent":["import React from 'react';\r\nimport { observable, computed, action, decorate } from \"mobx\";\r\nimport { observer } from '../node_modules/mobx-react';\r\n\r\n@observer\r\nclass Pokemon extends React.Component {\r\n    @observable isReverse;\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {isReverse: false};\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.handleClickPokemon = this.handleClickPokemon.bind(this);\r\n    }\r\n    @action handleClick(type) {\r\n        this.props.gettingType(type);\r\n        this.setState({currentType: type});\r\n    }\r\n\r\n    @action handleClickPokemon() {\r\n        this.setState(prevState => ({\r\n            isReverse: !prevState.isReverse\r\n        }));\r\n    }\r\n\r\n    render() {\r\n        let {id, name, type, attack, speed} = this.props;\r\n\r\n        return (\r\n            <div className=\"pokemon-single-container\">\r\n                <div>\r\n                    <img className=\"sprites\"  onClick={() => this.handleClickPokemon()}\r\n                        src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${this.state.isReverse ? \"back/\" + id : id}.png`}/>\r\n                    <p className=\"pokemon__name\">{name}</p>\r\n                    <div className=\"pokemon__character\">\r\n                        <p className=\"pokemon__character-head\">Type:</p>\r\n                        <div className=\"pokemon__type-list\">\r\n                            {type.map(t => \r\n                                <button className={\"pokemon-type \" + ((t))} key={t} onClick={(e) => this.handleClick(t)}>\r\n                                {t}\r\n                                </button>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"pokemon__character\">\r\n                        <p className=\"pokemon__character-head\">Attack:</p>\r\n                        <p className=\"pokemon__character-attack\">{attack}</p>\r\n                    </div>\r\n                    <div className=\"pokemon__character\">\r\n                        <p className=\"pokemon__character-head\">Speed:</p>\r\n                        <p className=\"pokemon__character-attack\">{speed}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Pokemon","import React from 'react';\r\nimport { observable, computed, action, decorate } from \"mobx\";\r\nimport { observer } from 'mobx-react';\r\n\r\n@observer\r\nclass Pagination extends React.Component {\r\n    @observable currentPage;\r\n    @observable pageCnt;\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.handlePaginClick = this.handlePaginClick.bind(this);\r\n        this.state = { \r\n            currentPage: 1,\r\n            pageCnt: 10,\r\n        };\r\n    }\r\n\r\n    @action handleClick(e) {\r\n        this.props.pageChange(Number(e.target.id));\r\n        this.setState({currentPage: Number(e.target.id)});\r\n    }\r\n\r\n    @action handlePaginClick(e) {\r\n        this.props.cntChange(Number(e.target.id));\r\n        this.setState({ pageCnt: Number(e.target.id), currentPage: 1});\r\n    }\r\n\r\n    render() {\r\n        const pageList = [];\r\n        const pokemPagin = [10, 20, 50];\r\n        let {currentPage, pageCnt} = this.state;\r\n\r\n        const pag = 300 / pageCnt;\r\n        for(let i=1; i<=pag; i++) {\r\n            pageList[i] = i;\r\n        }  \r\n\r\n        const cntPokPage = pokemPagin.map(pagin =>      \r\n            <button className={\"pagin-button \" + ((pageCnt === pagin)? 'pagin-button__active': '')} key={pagin} id={pagin} onClick={this.handlePaginClick}>\r\n                {pagin}\r\n            </button>\r\n        );\r\n        const pageOne = pageList.map(page =>      \r\n            <button className={\"pagin-button \" + ((currentPage === page)? 'pagin-button__active': '')} key={page} id={page} onClick={this.handleClick}>\r\n                {page}\r\n            </button>\r\n        );\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"button-container\">{cntPokPage}</div>\r\n                <div className=\"button-container\">{pageOne}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Pagination","import React from 'react';\r\nimport { observable, computed, action, decorate } from \"mobx\";\r\nimport {observer} from 'mobx-react';\r\n\r\n@observer\r\nclass PokemonTypeList extends React.Component {\r\n    @observable currentType;\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.state = { \r\n            currentType: \"\"\r\n        }\r\n    }\r\n\r\n    @action handleClick(typeName) {\r\n        this.props.gettingType(typeName);\r\n        this.setState({currentType: typeName});\r\n    }\r\n\r\n    render() {\r\n        const {typeName} = this.props;\r\n\r\n        const typeOne = (      \r\n            <button className={\"type-list__button\"} key={typeName} name={typeName} \r\n                onClick={(e) => this.handleClick(typeName)}>\r\n                {typeName}\r\n            </button>\r\n        );\r\n        return <div className=\"button-container\">{typeOne}</div>;\r\n    }\r\n}\r\n\r\nexport default PokemonTypeList","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Pokemon from './Pokemon';\nimport Pagination from './Pagination';\nimport PokemonTypeList from './PokemonTypeList';\nimport './App.css';\nimport { observable, computed, action, decorate } from \"mobx\";\nimport {observer} from 'mobx-react';\n\n@observer\nclass PokemonPage extends React.Component {\n    @observable pokemon;\n    @observable name;\n    @observable search;\n    @observable searchType;\n    @observable page;\n    @observable pokemonType;\n    @observable cntPage;\n    constructor(props) {\n        super(props)\n        this.handlePageChange = this.handlePageChange.bind(this);\n        this.handleCntChange = this.handleCntChange.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.state = {\n            pokemon: [],\n            name: \"\",\n            search: \"\",\n            searchType: \"\",\n            page: 1,\n            pokemonType: [],\n            cntPage: 10\n        }\n    }\n\n    @action handlePageChange(page) {\n        this.setState({page});\n    }\n\n    @action handleCntChange(cntPage) {\n        this.setState({\n            cntPage,\n            page: 1,\n            searchType: \"\"\n        });\n    }\n\n    @action handleChange(searchType) {\n        this.setState({\n            searchType,\n            search: \"\"\n        });\n    }\n\n    @action connectionApi() {\n        const poks = [];\n        for(let i=1; i<=300; i++) {\n            poks[i] = \"https://pokeapi.co/api/v2/pokemon/\" + i;\n        }\n        poks.map(url => fetch(url).then(response => response.json()).then(responseData => {\n            this.setState({\n                pokemon: this.state.pokemon.concat([responseData])\n            }\n            )\n        }))    \n    }\n\n    componentDidMount() {\n        this.connectionApi();\n    }\n\n    @action onchange = e =>{\n        this.setState({ search : e.target.value, searchType: \"\"});\n    }\n\n    render() {\n        let {pokemon, page, search, searchType, pokemonType, cntPage} = this.state;   \n        const filteredName = pokemon.filter( pok => {\n            return pok.name.toLowerCase().indexOf( search.toLowerCase() ) !== -1\n        })\n        const filteredType = pokemon.filter( pok => {\n            return (pok.types[0].type.name.toLowerCase().indexOf(searchType.toLowerCase()) !== -1)\n        })\n        \n       const typeDesk = pokemon.map(pok => pok.types[0].type.name)\n        for(let i=1; i<=pokemon.length; i++) {\n            if(pokemonType.indexOf(typeDesk[i]) === -1 && typeDesk[i] !== undefined) {\n                pokemonType.push(typeDesk[i])      \n            }   \n        } \n\n        const pagePokemon = pokemon;\n        const pages = pagePokemon.slice(cntPage*(page-1), cntPage*page);\n\n        let pokemonPage = (\n            <div className=\"main\">\n                <div className=\"pokemon-input\">\n                    <p>Input pokemon name:</p>\n                    <input icon=\"search\" onChange={this.onchange}/>\n                </div> \n                <Pagination pageChange={this.handlePageChange} cntChange={this.handleCntChange} data={pokemon} sizePage={this.page} cntPage={this.cntPage} />\n                <div className=\"type-list\">\n                {pokemonType.map((oneType, ind) =>\n                    <PokemonTypeList key={oneType} typeName={oneType} id={ind+1} gettingType={this.handleChange} />\n                )}\n                </div>\n                \n                <div className=\"main\">\n                    <div className=\"pokemon-container\">\n                    { (page !== 0 && cntPage !== 0 && search === \"\" && searchType === \"\") ?\n                        pages.map((character) => \n                        <Pokemon key = {character.name} name = {character.name} id = {character.id} \n                        type = {character.types.map(t => t.type.name)} \n                        attack = {character.stats[4].base_stat} speed = {character.stats[0].base_stat} gettingType={this.handleChange} />\n                        )\n                    :\n                     ((searchType === \"\") ? \n                        filteredName.map((character) => \n                            <Pokemon key = {character.name} name = {character.name} id = {character.id} type = {character.types.map(t => t.type.name)} \n                            attack = {character.stats[4].base_stat} speed = {character.stats[0].base_stat} gettingType={this.handleChange} />\n                        )\n                    :\n                        filteredType.map((character) => \n                            <Pokemon key = {character.name} name = {character.name} id = {character.id} type = {character.types.map(t => t.type.name)}\n                            attack = {character.stats[4].base_stat} speed = {character.stats[0].base_stat} gettingType={this.handleChange} />\n                        )  \n                    )\n                    }            \n                    </div>\n                </div>\n          </div>\n        );        \n        return <div>{pokemonPage}</div>;\n    }\n}\n\nReactDOM.render(<PokemonPage />, document.getElementById(\"root\"));\n\nexport default PokemonPage;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}