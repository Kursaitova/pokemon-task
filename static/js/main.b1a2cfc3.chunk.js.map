{"version":3,"sources":["Pokemon.js","Pagination.js","PokemonTypeList.js","App.js","serviceWorker.js","index.js"],"names":["Pokemon","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isReverse","handleClick","bind","assertThisInitialized","handleClickPokemon","type","gettingType","setState","currentType","prevState","_this2","_this$props","id","name","attack","speed","react_default","a","createElement","className","onClick","src","concat","map","t","key","e","React","Component","Pagination","handlePaginClick","currentPage","pageCnt","pageChange","Number","target","cntChange","pageList","_this$state","pag","i","cntPokPage","pagin","pageOne","page","PokemonTypeList","typeName","typeOne","PokemonPage","onchange","search","value","searchType","handlePageChange","handleCntChange","handleChange","pokemon","pokemonType","cntPage","poks","url","fetch","then","response","json","responseData","connectionApi","_this3","filteredName","filter","pok","toLowerCase","indexOf","filteredType","types","typeDesk","length","undefined","push","pages","slice","pokemonPage","icon","onChange","src_Pagination","data","sizePage","oneType","ind","src_PokemonTypeList","character","src_Pokemon","stats","base_stat","ReactDOM","render","App_PokemonPage","document","getElementById","Boolean","window","location","hostname","match","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b1a2cfc3.chunk.js","sourcesContent":["import React from 'react';\r\nimport { observable, computed, action, decorate } from \"mobx\";\r\n\r\nclass Pokemon extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {isReverse: false};\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.handleClickPokemon = this.handleClickPokemon.bind(this);\r\n    }\r\n    handleClick(type) {\r\n        this.props.gettingType(type);\r\n        this.setState({currentType: type});\r\n    }\r\n\r\n    handleClickPokemon() {\r\n        this.setState(prevState => ({\r\n            isReverse: !prevState.isReverse\r\n        }));\r\n    }\r\n\r\n    render() {\r\n        let {id, name, type, attack, speed} = this.props;\r\n\r\n        return (\r\n            <div className=\"pokemon-single-container\">\r\n                <div>\r\n                    <img className=\"sprites\"  onClick={() => this.handleClickPokemon()}\r\n                        src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${this.state.isReverse ? \"back/\" + id : id}.png`}/>\r\n                    <p className=\"pokemon__name\">{name}</p>\r\n                    <div className=\"pokemon__character\">\r\n                        <p className=\"pokemon__character-head\">Type:</p>\r\n                        <div className=\"pokemon__type-list\">\r\n                            {type.map(t => \r\n                                <button className={\"pokemon-type \" + ((t))} key={t} onClick={(e) => this.handleClick(t)}>\r\n                                {t}\r\n                                </button>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"pokemon__character\">\r\n                        <p className=\"pokemon__character-head\">Attack:</p>\r\n                        <p className=\"pokemon__character-attack\">{attack}</p>\r\n                    </div>\r\n                    <div className=\"pokemon__character\">\r\n                        <p className=\"pokemon__character-head\">Speed:</p>\r\n                        <p className=\"pokemon__character-attack\">{speed}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Pokemon","import React from 'react';\r\nimport { observable, computed, action, decorate } from \"mobx\";\r\n\r\nclass Pagination extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.handlePaginClick = this.handlePaginClick.bind(this);\r\n        this.state = { \r\n            currentPage: 1,\r\n            pageCnt: 10,\r\n        };\r\n    }\r\n\r\n    handleClick(e) {\r\n        this.props.pageChange(Number(e.target.id));\r\n        this.setState({currentPage: Number(e.target.id)});\r\n    }\r\n\r\n    handlePaginClick(e) {\r\n        this.props.cntChange(Number(e.target.id));\r\n        this.setState({ pageCnt: Number(e.target.id), currentPage: 1});\r\n    }\r\n\r\n    render() {\r\n        const pageList = [];\r\n        const pokemPagin = [10, 20, 50];\r\n        let {currentPage, pageCnt} = this.state;\r\n\r\n        const pag = 300 / pageCnt;\r\n        for(let i=1; i<=pag; i++) {\r\n            pageList[i] = i;\r\n        }  \r\n\r\n        const cntPokPage = pokemPagin.map(pagin =>      \r\n            <button className={\"pagin-button \" + ((pageCnt === pagin)? 'pagin-button__active': '')} key={pagin} id={pagin} onClick={this.handlePaginClick}>\r\n                {pagin}\r\n            </button>\r\n        );\r\n        const pageOne = pageList.map(page =>      \r\n            <button className={\"pagin-button \" + ((currentPage === page)? 'pagin-button__active': '')} key={page} id={page} onClick={this.handleClick}>\r\n                {page}\r\n            </button>\r\n        );\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"button-container\">{cntPokPage}</div>\r\n                <div className=\"button-container\">{pageOne}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Pagination","import React from 'react';\r\nimport { observable, computed, action, decorate } from \"mobx\";\r\n\r\nclass PokemonTypeList extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.state = { \r\n            currentType: \"\"\r\n        }\r\n    }\r\n\r\n    handleClick(typeName) {\r\n        this.props.gettingType(typeName);\r\n        this.setState({currentType: typeName});\r\n    }\r\n\r\n    render() {\r\n        const {typeName} = this.props;\r\n\r\n        const typeOne = (      \r\n            <button className={\"type-list__button\"} key={typeName} name={typeName} \r\n                onClick={(e) => this.handleClick(typeName)}>\r\n                {typeName}\r\n            </button>\r\n        );\r\n        return <div className=\"button-container\">{typeOne}</div>;\r\n    }\r\n}\r\n\r\nexport default PokemonTypeList","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Pokemon from './Pokemon';\nimport Pagination from './Pagination';\nimport PokemonTypeList from './PokemonTypeList';\nimport './App.css';\nimport { observable, computed, action, decorate } from \"mobx\";\nimport {observer} from 'mobx-react';\n\nclass PokemonPage extends React.Component {\n    constructor(props) {\n        super(props)\n        this.handlePageChange = this.handlePageChange.bind(this);\n        this.handleCntChange = this.handleCntChange.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.state = {\n          pokemon: [],\n          name: \"\",\n          search: \"\",\n          searchType: \"\",\n          page: 1,\n          pokemonType: [],\n          cntPage: 10\n        }\n    }\n\n    handlePageChange(page) {\n        this.setState({page});\n    }\n\n    handleCntChange(cntPage) {\n        this.setState({\n            cntPage,\n            page: 1,\n            searchType: \"\"\n        });\n    }\n\n    handleChange(searchType) {\n        this.setState({\n            searchType,\n            search: \"\"\n        });\n    }\n\n    connectionApi() {\n        const poks = [];\n        for(let i=1; i<=300; i++) {\n            poks[i] = \"https://pokeapi.co/api/v2/pokemon/\" + i;\n        }\n        poks.map(url => fetch(url).then(response => response.json()).then(responseData => {\n            this.setState({\n                pokemon: this.state.pokemon.concat([responseData])\n            }\n            )\n        }))    \n    }\n\n    componentDidMount() {\n        this.connectionApi();\n    }\n\n    onchange = e =>{\n        this.setState({ search : e.target.value, searchType: \"\"});\n    }\n\n    render() {\n        let {pokemon, page, search, searchType, pokemonType, cntPage} = this.state;   \n        const filteredName = pokemon.filter( pok => {\n            return pok.name.toLowerCase().indexOf( search.toLowerCase() ) !== -1\n        })\n        const filteredType = pokemon.filter( pok => {\n            return (pok.types[0].type.name.toLowerCase().indexOf(searchType.toLowerCase()) !== -1)\n        })\n        \n       const typeDesk = pokemon.map(pok => pok.types[0].type.name)\n        for(let i=1; i<=pokemon.length; i++) {\n            if(pokemonType.indexOf(typeDesk[i]) === -1 && typeDesk[i] !== undefined) {\n                pokemonType.push(typeDesk[i])      \n            }   \n        } \n\n        const pagePokemon = pokemon;\n        const pages = pagePokemon.slice(cntPage*(page-1), cntPage*page);\n\n        let pokemonPage = (\n            <div className=\"main\">\n                <div className=\"pokemon-input\">\n                    <p>Input pokemon name:</p>\n                    <input icon=\"search\" onChange={this.onchange}/>\n                </div> \n                <Pagination pageChange={this.handlePageChange} cntChange={this.handleCntChange} data={pokemon} sizePage={this.page} cntPage={this.cntPage} />\n                <div className=\"type-list\">\n                {pokemonType.map((oneType, ind) =>\n                    <PokemonTypeList key={oneType} typeName={oneType} id={ind+1} gettingType={this.handleChange} />\n                )}\n                </div>\n                \n                <div className=\"main\">\n                    <div className=\"pokemon-container\">\n                    { (page !== 0 && cntPage !== 0 && search === \"\" && searchType === \"\") ?\n                        pages.map((character) => \n                        <Pokemon key = {character.name} name = {character.name} id = {character.id} \n                        type = {character.types.map(t => t.type.name)} \n                        attack = {character.stats[4].base_stat} speed = {character.stats[0].base_stat} gettingType={this.handleChange} />\n                        )\n                    :\n                     ((searchType === \"\") ? \n                        filteredName.map((character) => \n                            <Pokemon key = {character.name} name = {character.name} id = {character.id} type = {character.types.map(t => t.type.name)} \n                            attack = {character.stats[4].base_stat} speed = {character.stats[0].base_stat} gettingType={this.handleChange} />\n                        )\n                    :\n                        filteredType.map((character) => \n                            <Pokemon key = {character.name} name = {character.name} id = {character.id} type = {character.types.map(t => t.type.name)}\n                            attack = {character.stats[4].base_stat} speed = {character.stats[0].base_stat} gettingType={this.handleChange} />\n                        )  \n                    )\n                    }            \n                    </div>\n                </div>\n          </div>\n        );        \n        return <div>{pokemonPage}</div>;\n    }\n}\n\nReactDOM.render(<PokemonPage />, document.getElementById(\"root\"));\n\nexport default PokemonPage;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}